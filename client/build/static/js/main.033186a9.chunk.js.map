{"version":3,"sources":["utils/mutations.js","utils/auth.js","pages/SearchBooks.js","utils/localStorage.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","_templateObject","_taggedTemplateLiteral","ADD_USER","_templateObject2","SAVE_BOOK","_templateObject3","REMOVE_BOOK","_templateObject4","getProfile","decode","this","getToken","loggedIn","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem","SearchBooks","searchedBooks","setSearchedBooks","useState","searchInput","setSearchInput","savedBookIds","setSavedBookIds","JSON","parse","useEffect","bookIdArr","length","stringify","saveBook","error","useMutation","_jsxs","_Fragment","children","_jsx","Jumbotron","fluid","className","Container","Form","onSubmit","async","event","preventDefault","response","query","fetch","concat","ok","Error","items","json","bookData","map","book","_book$volumeInfo$imag","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","infoLink","console","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","href","rel","Auth","disabled","some","savedBookId","onClick","bookToSave","find","data","variables","bookInput","log","handleSaveBook","GET_ME","SavedBooks","loading","useQuery","removeBook","userData","me","handleDeleteBook","updatedSavedBookIds","filter","removeBookId","savedBooks","SignupForm","userFormData","setUserFormData","username","email","password","validated","addUser","showAlert","setShowAlert","handleInputChange","_objectSpread","noValidate","currentTarget","checkValidity","stopPropagation","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","SignUpForm","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","Router","Routes","Route","path","element","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.033186a9.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\n// - `LOGIN_USER` will execute the `loginUser` mutation set up using Apollo Server.\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// - `ADD_USER` will execute the `addUser` mutation.\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// - `SAVE_BOOK` will execute the `saveBook` mutation.\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($bookInput: BookInput!) {\r\n    saveBook(bookInput: $bookInput) {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// - `REMOVE_BOOK` will execute the `removeBook` mutation.\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n","// use this to decode a token and get the user's information out of it\r\nimport decode from \"jwt-decode\";\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem(\"id_token\");\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem(\"id_token\", idToken);\r\n    window.location.assign(\"/\");\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem(\"id_token\");\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign(\"/\");\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default new AuthService();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\n// import hooks for mutations and our mutations\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n        link: book.volumeInfo.infoLink,\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // addUser will hold the output and error the error\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // execute addUser mutation and pass in variable data from form\r\n      const { data } = await saveBook({\r\n        variables: { bookInput: bookToSave },\r\n      });\r\n      console.log(data);\r\n      // save id if successful\r\n      if (error) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <p>\r\n                    {\" \"}\r\n                    <a href={book.link} rel=\"noopener\">\r\n                      {\" \"}\r\n                      Go to google book{\" \"}\r\n                    </a>{\" \"}\r\n                  </p>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","// This will hold the query `GET_ME`, which will execute the `me` query set up using Apollo Server.\r\nimport gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from \"react-bootstrap\";\r\n\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport { GET_ME } from \"../utils/queries\";\r\nimport { REMOVE_BOOK } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  //debugger\r\n  // reload user data using the GET_ME call\r\n  const userData = data?.me || {};\r\n  console.log(userData);\r\n\r\n  // function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // eslint-disable-next-line\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n\r\n      if (error) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n// import hooks for mutations and our mutations\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // using the apollo hook  useMutation pass the\r\n  // ADD_USER mutation in order to talk to graphql\r\n  // addUser will hold the output and error the error\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    if (error) {\r\n      throw new Error(\"something went wrong!\");\r\n    }\r\n\r\n    // use try/catch instead of promises to handle errors\r\n    try {\r\n      // execute addUser mutation and pass in variable data from form\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      Auth.login(data.addUser.token);\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  // using the apollo hook  useMutation pass the\r\n  // ADD_USER mutation in order to talk to graphql\r\n  // addUser will hold the output and error the error\r\n\r\n  const [login, { error }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      // Store the token in local storage\r\n      Auth.login(data.login.token);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n        {error && <div>Login failed</div>}\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem(\"id_token\");\r\n\r\n    operation.setContext({\r\n      // populates the header session that will communicate with Apollo\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : \"\",\r\n      },\r\n    });\r\n  },\r\n  uri: \"/graphql\",\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n\r\n          <Routes>\r\n            <Route path=\"/\" element={<SearchBooks />} />\r\n            <Route path=\"/saved\" element={<SavedBooks />} />\r\n            <Route\r\n              path=\"*\"\r\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\r\n            />\r\n          </Routes>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}